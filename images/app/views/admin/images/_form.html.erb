<%= form_for [:admin, @image], :url => @url_override || @url, :html => {:multipart => true} do |f| %>

  <%= render :partial => "/shared/admin/error_messages",
             :locals => {
               :object => @image,
               :include_object_name => false
             } %>
   <div class='field'>
     <label><%= t('.maximum_image_size', :megabytes => Image::MAX_SIZE_IN_MB) %></label>
   </div>

   <input type='hidden' name='wymeditor' value='<%= params[:wymeditor] %>'>

  <div class='field'>
    <% if action_name =~ /(edit)|(update)/ %>
     <p>
       <%= t('.use_current_image') %>
       <em><%= t('.or') %></em><%= t('.replace_image') %>
     </p>
     <p>
       <%= f.file_field :image %>
     </p>
    <% else %>
     <% # we must only hint at multiple when it's a new record otherwise update fails. %>
     <%= f.file_field :image, :multiple => true %>
    <% end %>
  </div>
  
             

  <% if action_name =~ /(edit)|(update)/ %>
  <div class='field' id="cropper_container">
    <label><%= t(".crop_image") %></label>
    <%= image_tag @image.thumbnail("960x720>").url, :id => 'cropbox' %>
  </div>
  
  <div class='field'>
    <label>Size:</label>
    <select name="crop_size"> 
    <%- RefinerySetting[:user_image_sizes].each_pair do |pair| %>
    <option value="<%=pair.last%>" rel="<%=@image.thumbnail(pair.first).url(:prefix => pair.first)%>"><%=pair.first.to_s.humanize%></option>
    <% end -%>
    <%- [:h,:w,:x,:x2,:y,:y2].each do |dimension| %>
      <%= hidden_field "crop[dimensions]", dimension %>
    <% end -%>
    <input type="hidden" name="crop[original][width]" value="<%=@image.width%>" />
    <input type="hidden" name="crop[original][height]" value="<%=@image.height%>" />
  </div>
  
  <div class='field'>
    <label for="crops_list">Current custom crops</label>
    <ul id="crops_list">
      <% @image.crops.each_pair do |key, crop_options| %>
      <li id="<%=key.to_s%>" class="saved">
      <% crop_options.each_pair do |k,v| %>
        <input type="hidden" name="image[meta][crops][<%=key.to_s%>][<%=k%>]" value="<%=v%>" class="crop_geometry" />
      <% end %>
      <%= key.to_s.humanize %> 
      (<a href="#" class="remove_crop">Remove</a>)
       <!-- | <a href="#" class="revert_crop">Revert</a>) -->
      </li>
      <% end %>
    </ul>
  </div>
  
  <div class='field'>
    <div id="current_crop" class="crop_preview_image">
      <label>Current Crop</label>
      <%= image_tag @image.thumbnail(:"1_x_1").url %>
    </div>
    
    <div id="crop_preview" class="crop_preview_image">
      <label>New Crop</label>
      <div class="crop_preview_wrapper">
        <%= image_tag @image.thumbnail("960x720>").url %>
      </div>
    </div>
  </div>
  <% end -%>

  <%= render :partial => "/shared/admin/form_actions",
             :locals => {
               :f => f,
               :continue_editing => false,
               :hide_cancel => (@app_dialog or action_name == "insert" or from_dialog?),
               :delete_title => t('delete', :scope => 'admin.images'),
               :delete_confirmation => t('message', :scope => 'shared.admin.delete', :title => @image.image_name)
             } -%>

  <% if @app_dialog %>
    <input type='hidden' name='app_dialog' value='<%= @app_dialog %>' />
    <input type='hidden' name='field' value='<%= @field %>' />
    <input type='hidden' name='update_image' value='<%= @update_image %>' />
    <input type='hidden' name='thumbnail' value='<%= @thumbnail %>' />
    <input type='hidden' name='callback' value='<%= @callback %>' />
    <input type='hidden' name='conditions' value='<%= @conditions %>' />
  <% end %>
<% end %>

<% if action_name =~ /(edit)|(update)/ %>

  <% content_for :javascripts do %>
  <%= javascript_include_tag 'jcrop.min' %>
  <%= stylesheet_link_tag 'jquery.jcrop' %>
  <script language="Javascript">
  var aspect_ratio, width, height, image, cropper, x, scaled_x, y, scaled_y, meta, image_width, image_height;
  
  image_height = <%=@image.thumbnail("960x720>").height%>;
  image_width = <%=@image.thumbnail("960x720>").width%>;
  
  function draw_cropbox(options) {
    cropper = $('#cropbox').Jcrop($.extend({
      setSelect: [ x, y, width, height ],
      aspectRatio: aspect_ratio,
      onChange: update_crop_values
    },options));
  }
  
  // set the selection area on the cropper
  function set_selection(x,y,x2,y2) {
    draw_cropbox({setSelect: [x,y,x2,y2]});
  }
  
  function update() {
    var $selected, ref;
    
    $selected = $("[name=crop_size] :selected");
    
    sizes = $selected.val().match(/([\d]{1,4})x([\d]{1,4}).*/);
    width = parseInt(sizes[1],10);
    height = parseInt(sizes[2],10);
    
    ref = $selected.text().replace(/\s/g, "_");
    
    aspect_ratio = width / height;
    
    update_current_crop();
    
    setup_for_crop(ref);
    set_selection(scaled_x, scaled_y, scaled_x + (width * scale_ratio), scaled_y + (height * scale_ratio));
  }
  
  // show the current crop for the selected size
  function update_current_crop() {
    var url = $("[name=crop_size] :selected").attr('rel');
    $("#current_crop img").attr('src', url);
  }
  
  // update the form submission values for the current crop
  function update_crop_values(dimensions) {
    for (var param in dimensions)
      $("[name='crop[dimensions]["+param+"]']").attr('value', dimensions[param]);
  
    update_preview_and_crops_list(dimensions);
  }
  
  // resize and reposition the preview image and the crops list
  function update_preview_and_crops_list(dimensions) {
    var cropper_image = $("#cropbox"),
        cropper_width = cropper_image.width(),
        cropper_height = cropper_image.height();
  
    var target_width = dimensions.w,
        target_height = dimensions.h;
  
    // set the size of the preview container to that selected in the drop-down
    var preview_container = $(".crop_preview_wrapper");
    preview_container.css({width: width, height: height});
  
    // set the size of the preview image to proportionally match the crop
    var preview_image = $("img", preview_container),
        preview_image_width = preview_image.width(),
        preview_image_height = preview_image.height();
  
    var target_preview_width = (width / target_width) * cropper_width,
        target_preview_height = (height / target_height) * cropper_height;
  
    preview_image.attr('width', target_preview_width).attr('height', target_preview_height);
  
    // reposition the preview image to refelct the start of the crop
    var target_left = dimensions.x,
        target_top = dimensions.y,
        target_preview_left = (target_left / cropper_width) * target_preview_width,
        target_preview_top = (target_top / cropper_height) * target_preview_height;
    preview_image.css({left: -target_preview_left, top: -target_preview_top});
    
    var original_width = parseInt($("[name='crop[original][width]']").val(),10),
        original_height = parseInt($("[name='crop[original][height]']").val(),10);
        
        // console.log(dimensions.w, cropper_width, original_width);
    
    var crop_left = Math.round((target_left / cropper_width) * original_width),
        crop_top = Math.round((target_top / cropper_height) * original_height),
        crop_width = Math.round((dimensions.w / cropper_width) * original_width),
        crop_height = Math.round((dimensions.h / cropper_height) * original_height);
    
    var crop = {
      resize: Math.round(target_preview_width)+"x"+Math.round(target_preview_height),
      x: Math.round(target_preview_left), width: Math.round(width),
      y: Math.round(target_preview_top), height: Math.round(height)
    }

    update_crops_list($("[name=crop_size] :selected").html(), crop);
  }
  
  // update the list of submission values for the form
  function update_crops_list(crop_name, crop_value) {
    $('[name=crop_geometry_value]').val(crop_value);
    $('[name=crop_geometry_name]').val(crop_name);
    
    var crop_name_id = crop_name.toLowerCase().replace(/\s/g, "_");
    
    var crops_list = $("#crops_list");
    var this_crop = $("#"+crop_name_id);
    
    if (this_crop.length > 0) {
      
      for (var key in crop_value) {
        var field = this_crop.find(".crop_geometry[name='image[meta][crops]["+crop_name_id+"]["+key+"]']");
        if (this_crop.hasClass("saved"))
          field.data("original", field.val());
        field.attr('value', crop_value[key]);
      }
      
    } else {
      var new_crop_geom = $("<li id='"+crop_name_id+"'>"+crop_name+" (<a class='remove_crop' href='#'>Remove<a/>)</li>");
      
      for (var key in crop_value) {
        var val = $("<input type='hidden' class='crop_geometry' />").attr("name", "image[meta][crops]["+crop_name_id+"]["+key+"]").attr('value', crop_value[key]);
        new_crop_geom.append(val);
      }
      
      crops_list.append(new_crop_geom);
    }
  }
  
  // setup values for current crop
  function setup_for_crop(crop_name) {
    var key, sizes, scaled_width;
    
    key = "image[meta][crops]["+crop_name+"]";
    size_ref = $("[name='"+key+"[resize]']").val();
    
    if (size_ref !== undefined && (sizes = size_ref.match(/([\d]{1,4})x([\d]{1,4}).*/))) {
      scaled_width = parseInt(sizes[1],10);
      scaled_height = parseInt(sizes[2],10);
      
      width = parseInt($("[name='"+key+"[width]']").val(),10);
      height = parseInt($("[name='"+key+"[height]']").val(),10);
      
      x = parseInt($("[name='"+key+"[x]']").val(),10);
      y = parseInt($("[name='"+key+"[y]']").val(),10);
      
      scale_ratio = image_width / scaled_width;
      
      scaled_x = (x / scaled_width) * image_width;
      scaled_y = (y / scaled_height) * image_height;
      
    }
  }
  
  // initialize
  function initialize_cropper() {
    // set listener on select box
    $("[name=crop_size]").change(update);
    update();
    
    $(".revert_crop").live('click', function() {
      var fields = $(this).siblings(".crop_geometry");
      if (fields.first().data("original")) {
        if (confirm("Are you sure you want to revert this crop to the previously saved version?")) {
          fields.each(function(idx, f) {
            f.attr('value', field.data("original"));
          });
        }
      } else {
        alert("You haven't yet made any changes to this crop");
      }
      return false;
    });
    
    $(".remove_crop").live("click", function() {
      if (confirm("Are you sure you want to remove this crop and revert to the automatically generated crop?")) {
        $(this).closest("li").remove();
      }
      return false;
    });
    
  }
  
  $(initialize_cropper);

  </script>
  <% end %>
<% end -%>